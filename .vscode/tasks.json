{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "windows": {
    "options": {
      "shell": {
        "executable": "cmd.exe",
        "args": [
          "/c",
          "call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86 10.0.22000.0 -vcvars_ver=14",
          "&&",
          "cd ${workspaceFolder}\\mods\\noita-mp",
          "&&"
        ]
      }
    }
  },
  "tasks": [
    {
      "hide": true, // disabled for now
      "label": "Python build LuaJIT",
      "type": "shell",
      "windows": {
        "command": "python ${workspaceFolder}\\.building\\build.py --build lua --lua-version ${input:luaRocksAwesomeInit}"
      },
      "problemMatcher": []
    },
    {
      "label": "LuaRocks awesome init",
      "type": "shell",
      //"dependsOrder": "sequence",
      //"dependsOn": ["Python build LuaJIT"],
      "windows": {
        "command": "${workspaceFolder}\\.vscode\\noita-mp-tasks.cmd"
      },
      "args": [
        "${userHome}\\AppData\\Roaming\\luarocks",
        "${workspaceFolder}",
        "${input:luaRocksAwesomeInit}"
      ],
      "problemMatcher": []
    },
    {
      "label": "LuaRocks install {packagename}",
      "type": "shell",
      "windows": {
        "command": "luarocks install ${input:luaRocksInstallPackageName}"
      },
      "problemMatcher": []
    },
    {
      "label": "LuaRocks remove {packagename}",
      "type": "shell",
      "windows": {
        "command": "luarocks remove ${input:luaRocksInstallPackageName}"
      },
      "problemMatcher": []
    },
    {
      "label": "LuaRocks install or update dependencies",
      "type": "shell",
      "windows": {
        "command": "luarocks install --only-deps noita-mp-4.0.1-4.rockspec"
      },
      "problemMatcher": []
    },
    {
      "label": "LuaRocks test",
      "type": "shell",
      "windows": {
        "command": "luarocks test ${input:luaRocksTestCommand}"
      },
      "problemMatcher": []
    },
    {
      "label": "Compile LuaJIT",
      "type": "shell",
      "windows": {
        "command": "cd ${workspaceFolder}\\.building\\LuaJIT && git status && cd ${workspaceFolder}\\.building\\LuaJIT\\src && msvcbuild.bat"
      },
      "problemMatcher": []
    },
    {
      "label": "Run LuaJIT Profiler on init.lua (LuaJIT-2.1.0-beta3)",
      "type": "shell",
      "windows": {
        "command": "lua -jp=a ${workspaceFolder}\\mods\\noita-mp\\LuaJITProfilerRunner.lua"
      },
      "problemMatcher": []
    },
    {
      "label": "lua-enet: 1. Clean builds",
      "type": "shell",
      "windows": {
        "command": "echo '1.' && cd ${workspaceFolder} && IF EXIST build (rd /s build /q && mkdir build) ELSE (echo 'No clean builds necessary'); && mkdir build"
      },
      "problemMatcher": []
    },
    {
      "label": "lua-enet: 2. Add or update lua-enet dependency",
      "type": "shell",
      "windows": {
        "command": "echo '2.' && cd ${workspaceFolder}\\build && git clone --depth 1 --branch master https://github.com/Ismoh/lua-enet.git" // && cd lua-enet && gh release download v2.3.6 --repo zpl-c/enet --clobber
      },
      "problemMatcher": []
    },
    {
      "label": "lua-enet: 3. pre-build",
      "type": "shell",
      "dependsOrder": "sequence",
      "dependsOn": ["Compile LuaJIT"],
      "windows": {
        "command": [
          "echo '3.'",
          "&& if not exist ${workspaceFolder}\\build\\LuaJIT (mkdir ${workspaceFolder}\\build\\LuaJIT)",
          "&& if not exist ${workspaceFolder}\\build\\LuaJIT\\bin (mkdir ${workspaceFolder}\\build\\LuaJIT\\bin)",
          "&& if not exist ${workspaceFolder}\\build\\LuaJIT\\include (mkdir ${workspaceFolder}\\build\\LuaJIT\\include)",

          //" && copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua51.ilk   ${workspaceFolder}\\build\\LuaJIT\\bin\\lua51.ilk     /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua51.pdb ${workspaceFolder}\\build\\LuaJIT\\bin\\lua51.pdb /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua51.dll ${workspaceFolder}\\build\\LuaJIT\\bin\\lua51.dll /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua51.exp ${workspaceFolder}\\build\\LuaJIT\\bin\\lua51.exp /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua51.lib ${workspaceFolder}\\build\\LuaJIT\\bin\\lua51.lib /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\luajit.exe ${workspaceFolder}\\build\\LuaJIT\\bin\\luajit.exe /Y",
          //" && copy ${workspaceFolder}\\.building\\LuaJIT\\src\\luajit.exp  ${workspaceFolder}\\build\\LuaJIT\\bin\\luajit.exp    /Y",
          //" && copy ${workspaceFolder}\\.building\\LuaJIT\\src\\luajit.lib  ${workspaceFolder}\\build\\LuaJIT\\bin\\luajit.lib    /Y",
          //" && copy ${workspaceFolder}\\.building\\LuaJIT\\src\\luajit.ilk  ${workspaceFolder}\\build\\LuaJIT\\bin\\luajit.ilk    /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\luajit.pdb ${workspaceFolder}\\build\\LuaJIT\\bin\\luajit.pdb /Y",

          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lauxlib.h ${workspaceFolder}\\build\\LuaJIT\\include\\lauxlib.h /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua.h ${workspaceFolder}\\build\\LuaJIT\\include\\lua.h /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lua.hpp ${workspaceFolder}\\build\\LuaJIT\\include\\lua.hpp /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\luaconf.h ${workspaceFolder}\\build\\LuaJIT\\include\\luaconf.h /Y",
          "&& copy ${workspaceFolder}\\.building\\LuaJIT\\src\\lualib.h ${workspaceFolder}\\build\\LuaJIT\\include\\lualib.h /Y",

          "&& if not exist ${workspaceFolder}\\build\\lua-enet\\luajit (mkdir ${workspaceFolder}\\build\\lua-enet\\luajit)",
          "&& xcopy ${workspaceFolder}\\build\\LuaJIT ${workspaceFolder}\\build\\lua-enet\\luajit /E /H /I",
        ]
      },
      "problemMatcher": []
    },
    {
      "label": "lua-enet: 0. create and run build (automated / one-click solution)",
      "type": "shell",
      "dependsOrder": "sequence",
      "dependsOn": [
        "lua-enet: 1. Clean builds",
        "lua-enet: 2. Add or update lua-enet dependency",
        "lua-enet: 3. pre-build"
      ],
      "windows": {
        "command": "echo '0.' && cd ${workspaceFolder} && cd build && cd lua-enet && cmake -S . -B build && cd build && ninja -v"
      },
      "problemMatcher": []
    },
    {
      "label": "lua-enet: 00. post build move enet libraries in dependencies directory",
      "type": "shell",
      "dependsOrder": "sequence",
      "dependsOn": ["lua-enet: 0. create and run build (automated / one-click solution)"],
      "windows": {
        "command": "echo '00.' && cd ${workspaceFolder} && copy ${workspaceFolder}\\build\\lua-enet\\build\\enet.* ${workspaceFolder}\\mods\\noita-mp\\lua_modules\\lib\\lua\\5.1 /Y"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "luaRocksAwesomeInit",
      "description": "Which LuaJIT version?",
      "type": "pickString",
      "options": ["v2.0.4", "v2.1.0-beta3"]
    },
    {
      "id": "luaRocksInstallPackageName",
      "description": "Write LuaRocks package name, you want to install!",
      "type": "promptString"
    },
    {
      "id": "luaRocksTestCommand",
      "description": "Keep blank for console output otherwise write in file!",
      "type": "pickString",
      "options": ["> result.log", ""]
    }
  ]
}
