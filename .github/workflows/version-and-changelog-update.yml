name: Version and changelog update
on:
  pull_request:
    types: [ opened, edited, synchronize, closed ]
permissions:
  pull-requests: write
jobs:
  find-linked-issues-and-copy-labels-to-pull-request:
    name: Copy labels from issue to pull request
    runs-on: ubuntu-latest
    outputs:
      labelNames: ${{ steps.add_labels.outputs.labelNames }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Is there a issue linked in "development"?
        id: validator
        uses: HarshCasper/validate-issues-over-pull-requests@v0.1.1
        with:
          prbody: ${{ github.event.pull_request.body }}
          prurl: ${{ github.event.pull_request.url }}
      
      - name: "'Development' set?"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRNUM: ${{ github.event.pull_request.number }}
          ACCESS_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          commentListResponse=`gh api -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/${{github.event.number}}/comments`
          echo "commentListResponse="$commentListResponse
          # https://jqplay.org/s/WsuVZ8f-YiB
          commentIds=$(echo $commentListResponse | jq '.[] | select(.body | contains("Your pull request is not linked to any issue")) | .id')
          echo "commentIds="$commentIds
        
          for commentId in $commentIds
          do
            echo "commentId="$commentId
            statusCode=`gh api --method DELETE -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/comments/$commentId`
            echo "statusCode="$statusCode
            if [[ $statusCode != "" ]]
            then
              echo "Unable to delete comment with id "$commentId
            fi
          done

          if [ ${{ steps.validator.outputs.valid }} == 0 ]
          then
            body=":warning: :exclamation: Your pull request is not linked to any issue, please make the corresponding changes in the very first comments body by adding 'Fixes #issue-number' or 'Resolves #issue-number'. If your pull request isn't linked to any issue, ignore this comment!"
            statusCode=`gh api --method POST -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/${{github.event.number}}/comments -f body="$body"`
            echo "statusCode="$statusCode
          
            if [[ $statusCode == "" ]]
            then
              echo "Unable to add comment to pull request!"
              exit 1
            fi
          fi
      
      - name: Find linked issues
        if: ${{ steps.validator.outputs.valid == 1 }}
        id: links
        uses: hossainemruz/linked-issues@main
        with:
          pr_url: ${{github.event.pull_request.html_url}}
          format: IssueNumber
      
      - name: Add labels of associated/linked issue to the pull request
        if: ${{ steps.validator.outputs.valid == 1 }}
        id: add_labels
        run: |
          for issueNumber in ${{ steps.links.outputs.issues }}
          do
            issueUrl=$( echo ${{ github.event.pull_request.base.repo.issues_url }} | sed "s/{\/number}/\/$issueNumber/g" )
            labels=$( curl $issueUrl | jq '.labels')
            echo "labels="$labels
        
            for label in $( echo $labels | jq -r '.[] | .name' )
            do
              labelNames="${labelNames:+$labelNames,}\"$label\""
            done
        
          done
          echo "labelNames="$labelNames
          data="{\"labels\":[${labelNames}]}"
        
          curlResponse=`curl --write-out '%{http_code}' --output /dev/null --request POST \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Authorization: token ${{ github.token }}' \
          --header 'Content-Type: application/json' \
          --url 'https://api.github.com/repos/${{github.repository}}/issues/${{github.event.number}}/labels' \
          --data-raw $data`
        
          if [[ $curlResponse == *"200"* ]]
          then
            echo "SUCCESS"
          else
            echo "FAILURE"
            exit 1
          fi
        
          echo "::set-output name=labelNames::$labelNames"
  
  update-version:
    needs: find-linked-issues-and-copy-labels-to-pull-request
    env:
      LABEL_NAMES: ${{ needs.find-linked-issues-and-copy-labels-to-pull-request.outputs.labelNames }}
      VERSION_FILE_NAME: 'mods/noita-mp/.version'
      VERSION_FRAGMENT: 'will be fetched by file'
    name: Increase version and create a tag, when merged
    outputs:
      futureRelease: ${{ steps.extend_version.outputs.futureRelease }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Increase version depending on labels
        uses: HardNorth/github-version-generate@v1.2.0
        with:
          version-source: file
          version-file: ${{ env.VERSION_FILE_NAME }}
          version-file-extraction-pattern: '^v(.*)'
          next-version-increment-major: ${{ contains(env.LABEL_NAMES, 'rework') }}
          next-version-increment-minor: ${{ contains(env.LABEL_NAMES, 'enhancement') }}
          next-version-increment-patch: ${{ contains(env.LABEL_NAMES, 'bug') }}
          next-version-cut-build-metadata: false
          next-version-put-build-metadata: true
      
      - name: Extend version with custom build numbers
        id: extend_version
        run: |
          nextVersion="v$NEXT_VERSION+$(git log --oneline | wc -l)"
          echo "nextVersion="$nextVersion
          echo "NEXT_VERSION=${nextVersion}" >> $GITHUB_ENV
          echo "::set-output name=futureRelease::$nextVersion"
      
      - name: Add comment to pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          commentListResponse=`gh api -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/${{github.event.number}}/comments`
          echo "commentListResponse="$commentListResponse
          # https://jqplay.org/s/WsuVZ8f-YiB
          commentIds=$(echo $commentListResponse | jq '.[] | select(.body | contains("will be automatically increase to")) | .id')
          echo "commentIds="$commentIds
        
          for commentId in $commentIds
          do
            echo "commentId="$commentId
            statusCode=`gh api --method DELETE -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/comments/$commentId`
            echo "statusCode="$statusCode
            if [[ $statusCode != "" ]]
            then
              echo "Unable to delete comment with id "$commentId
            fi
          done
        
          body="When this pull request was merged: <br /> - Current Version **v$CURRENT_VERSION** will be automatically increase to **$NEXT_VERSION** in **${{ github.base_ref }}** <br /> - Tag **$NEXT_VERSION** will be created to the specific commit."
          statusCode=`gh api --method POST -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/${{github.event.number}}/comments -f body="$body"`
          echo "statusCode="$statusCode
        
          if [[ $statusCode == "" ]]
          then
            echo "Unable to add comment to pull request!"
            exit 1
          fi
      
      - name: Commit and push version changes and tag it, when merged
        env:
          MERGED: ${{ github.event.pull_request.merged }}
        run: |
          if [ $MERGED == true ]
          then
            git fetch
            git checkout ${{ github.base_ref }}
            git pull origin ${{ github.base_ref }}
            echo "$NEXT_VERSION" > $VERSION_FILE_NAME
            git config --local user.email "action@github.com"
            git config --local user.name "github-actions"
            git add $VERSION_FILE_NAME
            git commit -m "Updated version to $NEXT_VERSION in https://github.com/${{github.repository}}/pull/${{github.event.number}}"
            git tag -a "$NEXT_VERSION" -m "Automatic tag creation, do not consider tags as release. For further technical information, see https://github.com/${{github.repository}}/pull/${{github.event.number}}"
            git push origin ${{ github.base_ref }} --tags
          else
            echo "Pull request is not merged yet, therefore '$VERSION_FILE_NAME' will not be increased."
          fi
  
  update-changelog:
    needs: update-version
    env:
      FUTURE_RELEASE: ${{ needs.update-version.outputs.futureRelease }}
    name: Update CHANGELOG.md
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check environment
        run: |
          echo "needs.update-version.env.next_version="${{ needs.update-version.env.next_version }}
          echo "needs.update-version.env.NEXT_VERSION="${{ needs.update-version.env.NEXT_VERSION }}
          echo "NEXT_VERSION="$NEXT_VERSION
          echo "env.NEXT_VERSION="${{ env.NEXT_VERSION }}
          echo "env.next_version=""${{ env.next_version }}"
          echo "FUTURE_RELEASE="$FUTURE_RELEASE
          echo "env.FUTURE_RELEASE="${{ env.FUTURE_RELEASE }}
      
      - name: Generate CHANGELOG.md
        id: generate_changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          dateFormat: "%d.%m.%Y"
          output: "CHANGELOG.md"
          issueLineLabels: "ALL"
          breakingLabels: "backwards-incompatible,breaking,rework,refactor"
          futureRelease: ${{ env.FUTURE_RELEASE }}
      
      - name: Commit and push CHANGELOG.md, when merged
        env:
          CHANGELOG: ${{ steps.generate_changelog.outputs.changelog }}
          MERGED: ${{ github.event.pull_request.merged }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.WORKFLOW_PAT }}
          token: ${{ secrets.WORKFLOW_PAT }}
        run: |
          commentListResponse=`gh api -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/${{github.event.number}}/comments`
          echo "commentListResponse="$commentListResponse
          # https://jqplay.org/s/WsuVZ8f-YiB
          commentIds=$(echo $commentListResponse | jq '.[] | select(.body | contains("# Changelog")) | .id')
          echo "commentIds="$commentIds
        
          for commentId in $commentIds
          do
            echo "commentId="$commentId
            statusCode=`gh api --method DELETE -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/comments/$commentId`
            echo "statusCode="$statusCode
            if [[ $statusCode != "" ]]
            then
              echo "Unable to delete comment with id "$commentId
            fi
          done
        
          echo ""
          echo "CHANGELOG="$CHANGELOG
          echo ""
        
          printf -v escapedChangelog "%q\n" $CHANGELOG
          echo "escapedChangelog="$escapedChangelog
        
          statusCode=`gh api --method POST -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer $ACCESS_TOKEN' /repos/${{github.repository}}/issues/${{github.event.number}}/comments -f body="$CHANGELOG"`
          echo "statusCode="$statusCode
          if [[ $statusCode == "" ]]
          then
            echo "Unable to add comment to pull request!"
          fi
        
          if [ $MERGED == true ]
          then
            git fetch
            git checkout ${{ github.base_ref }}
            git pull origin ${{ github.base_ref }}
            git config --local user.email "action@github.com"
            git config --local user.name "github-actions"
            git add CHANGELOG.md
            git commit -m "Updated CHANGELOG.md in https://github.com/${{github.repository}}/pull/${{github.event.number}}"
            git push origin ${{ github.base_ref }}
          else
            echo "Pull request is not merged yet, therefore CHANGELOG.md will not be updated."
          fi
