name: Ubuntu Lua Unit Testing

on: [push, pull_request]

jobs:
  lua-unit-testing-on-ubuntu-latest:
    name: "LuaUnit on Ubuntu-latest"
    runs-on: ubuntu-latest
    env:
      temp_dir: ${{ github.workspace }}/temp

    steps:
    - uses: actions/checkout@main

    - name: Install luaJIT 2.0.4
      run: |
        cd ${{ github.workspace }}/.building/LuaJIT-2.0.4
        make PREFIX=${{ github.workspace }}/luajit
        make install PREFIX=${{ github.workspace }}/luajit

    - name: Run lua script to adjust lua package pathes
      run: |
        mkdir ${{ env.temp_dir }}
        ${{ github.workspace }}/luajit/bin/luajit ${{ github.workspace }}/mods/noita-mp/files/scripts/init/init_.lua ${{ env.temp_dir }}
        
    - name: Run LuaUnit 3.4
      id: lua_unit_tests
      run: |
        ######## copy luaunit.lua to package directory, because I don't want to mess around with lua pathes again
        cp ${{ github.workspace }}/mods/noita-mp/files/lib/external/luaunit.lua ${{ github.workspace }}/luajit/share/lua/5.1/
        ######## run all lua test files with one command: https://stackoverflow.com/a/10523492/3493998
        sudo find ${{ github.workspace }}/.testing/tests -name "*.lua" -type f -exec ${{ github.workspace }}/luajit/bin/luajit {} -o text --verbose \; > ${{ github.workspace }}/.testing/testresult.log
        # https://timheuer.com/blog/manually-force-a-failure-in-github-action-step/
        cat ${{ github.workspace }}/.testing/testresult.log
        echo "::set-output name=fail::$( grep FAIL ${{ github.workspace }}/.testing/testresult.log )"
        echo "::set-output name=error::$( grep ERROR ${{ github.workspace }}/.testing/testresult.log )"
        echo "::set-output name=not_found::$( cat ${{ github.workspace }}/.testing/testresult.log )" # if empty, something went wrong
      
    - name: Unit test failed?
      ######## Check if tests succeed:
      # https://stackoverflow.com/questions/59191913/get-output-of-a-specific-step-in-github-actions
      if: ${{ steps.lua_unit_tests.outputs.fail != '' || steps.lua_unit_tests.outputs.error != '' || steps.lua_unit_tests.outputs.not_found == '' }}
      run: |
        echo "steps.lua_unit_tests.outputs.fail = ${{ steps.lua_unit_tests.outputs.fail }}"
        echo "steps.lua_unit_tests.outputs.error = ${{ steps.lua_unit_tests.outputs.error }}"
        echo "steps.lua_unit_tests.outputs.not_found = ${{ steps.lua_unit_tests.outputs.not_found }}"
        echo "Unit tests failed!"
        exit 1

    - name: Install luarocks 3.8.0
      run: |
        ######## install lua rocks manually: https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Unix
        wget https://luarocks.github.io/luarocks/releases/luarocks-3.8.0.tar.gz
        tar zxpf luarocks-3.8.0.tar.gz
        cd luarocks-3.8.0
        ######## set luajit pathes to luarocks
        ./configure --prefix=${{ github.workspace }}/luarocks --with-lua=${{ github.workspace }}/luajit --with-lua-include=${{ github.workspace }}/luajit/include/luajit-2.0 --with-lua-lib=${{ github.workspace }}/luajit/lib
        make
        make install

    - name: Install dependencies
      run: |
        ######## Use --tree to define the installation path of the module, which is luajit/share/lua/5.1/ although only the 'root' directory is set
        ${{ github.workspace }}/luarocks/bin/luarocks --tree=${{ github.workspace }}/luajit install luacov
        ${{ github.workspace }}/luarocks/bin/luarocks --tree=${{ github.workspace }}/luajit install luacov-coveralls

    - name: Generate coverage report with luacov
      run: |
        sudo find ${{ github.workspace }}/.testing/tests -name "*.lua" -type f -exec ${{ github.workspace }}/luajit/bin/luajit -lluacov {} \;
        ${{ github.workspace }}/luajit/bin/luacov
        ls -R
        
    - name: Generate coverage report with luacov-coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_DEBUG: true
      run: |
        ${{ github.workspace }}/luajit/bin/luacov-coveralls -v

    - name: Remove luarocks-3.8.0 codecov.yml
      run: |
        rm ${{ github.workspace }}/luarocks-3.8.0/.codecov.yml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ github.workspace }}
        flags: unittesting
        name: Ubuntu Lua Unit Testing
        verbose: true